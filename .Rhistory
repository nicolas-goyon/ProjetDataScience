reg_model <- lm(Salaire_annuel ~ Pays + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
# Summary of the regression model
summary(reg_model)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel", "")
# raw_data_filtered <- raw_data[complete.cases(raw_data$Pays) & raw_data$Pays != "" & !grepl("^\\s*$", raw_data$Pays) & !is.na(raw_data$Salaire_annuel), ]
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays <- as.factor(raw_data$Pays)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays <- as.character(raw_data$Pays)
raw_data
raw_data$Tout_Pays <- ifelse(raw_data$France == "France", "France", raw_data$Pays)
raw_data
# Create a linear model
reg_model <- lm(Salaire_annuel ~ Pays + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
# Summary of the regression model
summary(reg_model)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel", "")
# raw_data_filtered <- raw_data[complete.cases(raw_data$Pays) & raw_data$Pays != "" & !grepl("^\\s*$", raw_data$Pays) & !is.na(raw_data$Salaire_annuel), ]
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays <- as.factor(raw_data$Pays)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays <- as.character(raw_data$Pays)
Pays <- ifelse(raw_data$France == "France", "France", raw_data$Pays)
# Create a linear model
reg_model <- lm(Salaire_annuel ~ Pays + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
# Summary of the regression model
summary(reg_model)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel", "")
# raw_data_filtered <- raw_data[complete.cases(raw_data$Pays) & raw_data$Pays != "" & !grepl("^\\s*$", raw_data$Pays) & !is.na(raw_data$Salaire_annuel), ]
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays <- as.factor(raw_data$Pays)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays <- as.character(raw_data$Pays)
Pays <- ifelse(raw_data$France == "France", "France", raw_data$Pays)
# Create a linear model
reg_model <- lm(Salaire_annuel ~ Pays + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
# Summary of the regression model
summary(reg_model)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel", "")
# raw_data_filtered <- raw_data[complete.cases(raw_data$Pays) & raw_data$Pays != "" & !grepl("^\\s*$", raw_data$Pays) & !is.na(raw_data$Salaire_annuel), ]
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays <- as.factor(raw_data$Pays)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays <- as.character(raw_data$Pays)
raw_data$Pays <- ifelse(raw_data$France == "France", "France", raw_data$Pays)
# Create a linear model
reg_model <- lm(Salaire_annuel ~ Pays + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
# Summary of the regression model
summary(reg_model)
# Trying ISO-8859-1
base_data <- read.csv("data/data_2022.csv", sep = ";")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation","Secteur","Nature_contrat", "France","Region", "Pays", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete", "Salaire_annuel", "Responsabilite_hierarchique", "Responsabilite_budget", "Responsabilite_equipe", "Responsabilite_projet", "Satisfaction_globale", "Saitisfaction_relations", "Satisfaction_salaire", "Satisfaction_autonomie", "Satisfaction_localisation")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Trying ISO-8859-1
base_data <- read.csv("data/data_2022.csv", sep = ";")
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut", "Salaire_annuel_brut_primes", "Responsabilite_hierarchique", "Responsabilite_budget", "Responsabilite_equipe", "Responsabilite_projet", "Satisfaction_globale", "Saitisfaction_relations", "Satisfaction_salaire","Satisfaction_condition_travail", "Satisfaction_autonomie", "Satisfaction_localisation")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
```{r chargementData}
# Trying ISO-8859-1
raw_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut", "Salaire_annuel_brut_primes", "Responsabilite_hierarchique", "Responsabilite_budget", "Responsabilite_equipe", "Responsabilite_projet", "Satisfaction_globale", "Saitisfaction_relations", "Satisfaction_salaire","Satisfaction_condition_travail", "Satisfaction_autonomie", "Satisfaction_localisation")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Trying ISO-8859-1
raw_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut", "Salaire_annuel_brut_primes", "Responsabilite_hierarchique", "Responsabilite_budget", "Responsabilite_equipe", "Responsabilite_projet", "Satisfaction_globale", "Saitisfaction_relations", "Satisfaction_salaire","Satisfaction_condition_travail", "Satisfaction_autonomie", "Satisfaction_localisation")
# Convert columns to factors
raw_data[factor_cols] <- lapply(raw_data[factor_cols], as.factor)
# Convert columns to numeric
raw_data[numeric_cols] <- sapply(raw_data[numeric_cols], as.numeric)
# Trying ISO-8859-1
raw_data <- read.csv("data/data_2022.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut", "Salaire_annuel_brut_primes", "Responsabilite_hierarchique", "Responsabilite_budget", "Responsabilite_equipe", "Responsabilite_projet", "Satisfaction_globale", "Saitisfaction_relations", "Satisfaction_salaire","Satisfaction_condition_travail", "Satisfaction_autonomie", "Satisfaction_localisation")
# Convert columns to factors
raw_data[factor_cols] <- lapply(raw_data[factor_cols], as.factor)
# Convert columns to numeric
raw_data[numeric_cols] <- lapply(raw_data[numeric_cols], as.numeric)
# Trying ISO-8859-1
raw_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut", "Salaire_annuel_brut_primes", "Responsabilite_hierarchique", "Responsabilite_budget", "Responsabilite_equipe", "Responsabilite_projet", "Satisfaction_globale", "Saitisfaction_relations", "Satisfaction_salaire","Satisfaction_condition_travail", "Satisfaction_autonomie", "Satisfaction_localisation")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Trying ISO-8859-1
raw_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut", "Salaire_annuel_brut_primes", "Responsabilite_hierarchique", "Responsabilite_budget", "Responsabilite_equipe", "Responsabilite_projet", "Satisfaction_globale", "Saitisfaction_relations", "Satisfaction_salaire","Satisfaction_condition_travail", "Satisfaction_autonomie", "Satisfaction_localisation")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Trying ISO-8859-1
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut", "Salaire_annuel_brut_primes", "Responsabilite_hierarchique", "Responsabilite_budget", "Responsabilite_equipe", "Responsabilite_projet", "Satisfaction_globale", "Saitisfaction_relations", "Satisfaction_salaire","Satisfaction_condition_travail", "Satisfaction_autonomie", "Satisfaction_localisation")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Convert columns to numeric
base_data[numeric_cols] <- lapply(base_data[numeric_cols], as.numeric)
# Trying ISO-8859-1
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut_primes", "Responsabilite_hierarchique", "Responsabilite_budget", "Responsabilite_equipe", "Responsabilite_projet", "Satisfaction_globale", "Saitisfaction_relations", "Satisfaction_salaire","Satisfaction_condition_travail", "Satisfaction_autonomie", "Satisfaction_localisation")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Convert columns to numeric
base_data[numeric_cols] <- lapply(base_data[numeric_cols], as.numeric)
# Trying ISO-8859-1
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut_primes")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Convert columns to numeric
base_data[numeric_cols] <- lapply(base_data[numeric_cols], as.numeric)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel", "")
# raw_data_filtered <- raw_data[complete.cases(raw_data$Pays) & raw_data$Pays != "" & !grepl("^\\s*$", raw_data$Pays) & !is.na(raw_data$Salaire_annuel), ]
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays <- as.factor(raw_data$Pays)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays <- as.character(raw_data$Pays)
raw_data$Pays <- ifelse(raw_data$France == "France", "France", raw_data$Pays)
# Create a linear model
reg_model <- lm(Salaire_annuel ~ Pays + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel_brut_primes", "")
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays <- as.factor(raw_data$Pays)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays <- as.character(raw_data$Pays)
raw_data$Pays <- ifelse(raw_data$France == "France", "France", raw_data$Pays)
# Create a linear model
reg_model <- lm(Salaire_annuel_brut_primes ~ Pays + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel_brut_primes", "")
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays_etranger <- as.factor(raw_data$Pays_etranger)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays_etranger <- as.character(raw_data$Pays_etranger)
raw_data$Pays_etranger <- ifelse(raw_data$Pays == "France", "France", raw_data$Pays_etranger)
# Create a linear model
reg_model <- lm(Salaire_annuel_brut_primes ~ Pays_etranger + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
# Trying ISO-8859-1
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut_primes")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Convert columns to numeric
base_data[numeric_cols] <- lapply(base_data[numeric_cols], as.numeric)
# Trying ISO-8859-1
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut_primes")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Convert columns to numeric
base_data[numeric_cols] <- lapply(base_data[numeric_cols], as.numeric)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel_brut_primes", "")
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays_etranger <- as.factor(raw_data$Pays_etranger)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays_etranger <- as.character(raw_data$Pays_etranger)
raw_data$Pays_etranger <- ifelse(raw_data$Pays == "France", "France", raw_data$Pays_etranger)
# Create a linear model
reg_model <- lm(Salaire_annuel_brut_primes ~ Pays_etranger + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
View(raw_data)
View(base_data)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation_actuelle", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel_brut_primes", "")
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays_etranger <- as.factor(raw_data$Pays_etranger)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays_etranger <- as.character(raw_data$Pays_etranger)
raw_data$Pays_etranger <- ifelse(raw_data$Pays == "France", "France", raw_data$Pays_etranger)
# Create a linear model
reg_model <- lm(Salaire_annuel_brut_primes ~ Pays_etranger + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
# Summary of the regression model
summary(reg_model)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation_actuelle", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel_brut_primes", "")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "CDD a la cimenterie Lafarge de Saint Pierre La Cour depuis le 1 er mars 2022. Passage en CDI a partir de fevrier 2023")
#
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays_etranger <- as.factor(raw_data$Pays_etranger)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays_etranger <- as.character(raw_data$Pays_etranger)
raw_data$Pays_etranger <- ifelse(raw_data$Pays == "France", "France", raw_data$Pays_etranger)
# Create a linear model
reg_model <- lm(Salaire_annuel_brut_primes ~ Pays_etranger + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
# Summary of the regression model
summary(reg_model)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation_actuelle", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel_brut_primes", "")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "CDD a la cimenterie Lafarge de Saint Pierre La Cour depuis le 1 er mars 2022. Passage en CDI a partir de fevrier 2023")
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays_etranger <- as.factor(raw_data$Pays_etranger)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays_etranger <- as.character(raw_data$Pays_etranger)
raw_data$Pays_etranger <- ifelse(raw_data$Pays == "France", "France", raw_data$Pays_etranger)
# Create a linear model
reg_model <- lm(Salaire_annuel_brut_primes ~ Pays_etranger + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
# Summary of the regression model
summary(reg_model)
raw_data <- base_data
filtered_data <- remove_rows_by_value(raw_data, "Situation_actuelle", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel_brut_primes", "")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "CDD a la cimenterie Lafarge de Saint Pierre La Cour depuis le 1 er mars 2022. Passage en CDI a partir de fevrier 2023")
raw_data <- filtered_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays_etranger <- as.factor(raw_data$Pays_etranger)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Convert Pays column to character
raw_data$Pays_etranger <- as.character(raw_data$Pays_etranger)
raw_data$Pays_etranger <- ifelse(raw_data$Pays == "France", "France", raw_data$Pays_etranger)
# Create a linear model
reg_model <- lm(Salaire_annuel_brut_primes ~ Filiere + Pays_etranger + Nature_contrat + Type_formation + Genre, data = raw_data)
# Summary of the regression model
summary(reg_model)
raw_data <- base_data
# ANOVA pour la variable "Pays"
anova_pays <- aov(Salaire_annuel_brut_primes ~ Pays, data = base_data)
# ANOVA pour la variable "Nature_contrat"
anova_contrat <- aov(Salaire_annuel_brut_primes ~ Nature_contrat, data = base_data)
# ANOVA pour la variable "Filiere"
anova_filiere <- aov(Salaire_annuel_brut_primes ~ Filiere, data = base_data)
# ANOVA pour la variable "Type_formation"
anova_formation <- aov(Salaire_annuel_brut_primes ~ Type_formation, data = base_data)
# ANOVA pour la variable "Genre"
anova_genre <- aov(Salaire_annuel_brut_primes ~ Genre, data = base_data)
# Afficher les résultats
summary(anova_pays)
summary(anova_contrat)
summary(anova_filiere)
summary(anova_formation)
summary(anova_genre)
# Installer le package ca si ce n'est pas déjà fait
# install.packages("ca")
# Charger les données
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Spécifier les colonnes à convertir en facteurs
factor_cols <- c("Genre", "Nature_contrat", "Filiere", "Type_formation", "Pays")
# Convertir les colonnes en facteurs
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Charger le package ca
library(ca)
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(ggplot2)
if(!requireNamespace("ca", quietly = TRUE)){
install.packages("ca")
}
# Installer le package ca si ce n'est pas déjà fait
# Charger les données
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Spécifier les colonnes à convertir en facteurs
factor_cols <- c("Genre", "Nature_contrat", "Filiere", "Type_formation", "Pays")
# Convertir les colonnes en facteurs
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Charger le package ca
library(ca)
# Sélectionner les colonnes pour l'analyse AFCM
data_afcm <- base_data[, c("Genre", "Nature_contrat", "Filiere", "Type_formation", "Pays")]
# Effectuer l'Analyse Factorielle des Correspondances Multiples (AFCM)
afcm_result <- CA(data_afcm, graph = FALSE)
# Installer le package ca si ce n'est pas déjà fait
# Charger les données
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Spécifier les colonnes à convertir en facteurs
factor_cols <- c("Genre", "Nature_contrat", "Filiere", "Type_formation", "Pays")
# Convertir les colonnes en facteurs
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Charger le package ca
library(ca)
# Sélectionner les colonnes pour l'analyse AFCM
data_afcm <- base_data[, c("Genre", "Nature_contrat", "Filiere", "Type_formation", "Pays")]
# Effectuer l'Analyse Factorielle des Correspondances Multiples (AFCM)
afcm_result <-  ca(data_afcm, graph = FALSE)
# Installer le package ca si ce n'est pas déjà fait
# Charger les données
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Spécifier les colonnes à convertir en facteurs
factor_cols <- c("Genre", "Nature_contrat", "Filiere", "Type_formation", "Pays")
# Convertir les colonnes en facteurs
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Charger le package ca
library(ca)
# Sélectionner les colonnes pour l'analyse AFCM
data_afcm <- base_data[, c("Genre", "Nature_contrat", "Filiere", "Type_formation", "Pays")]
# Effectuer l'Analyse Factorielle des Correspondances Multiples (AFCM)
afcm_result <- ca(data_afcm)
# Trying ISO-8859-1
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut_primes")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Convert columns to numeric
base_data[numeric_cols] <- lapply(base_data[numeric_cols], as.numeric)
filtered_data <- remove_rows_by_value(base_data, "Situation_actuelle", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel_brut_primes", "")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "CDD a la cimenterie Lafarge de Saint Pierre La Cour depuis le 1 er mars 2022. Passage en CDI a partir de fevrier 2023")
base_data <- filtered_data
# Installer le package ca si ce n'est pas déjà fait
# Charger les données
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Spécifier les colonnes à convertir en facteurs
factor_cols <- c("Genre", "Nature_contrat", "Filiere", "Type_formation", "Pays")
# Convertir les colonnes en facteurs
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Charger le package ca
library(ca)
# Sélectionner les colonnes pour l'analyse AFCM
data_afcm <- base_data[, c("Genre", "Nature_contrat", "Filiere", "Type_formation", "Pays")]
# Effectuer l'Analyse Factorielle des Correspondances Multiples (AFCM)
afcm_result <- ca(data_afcm)
