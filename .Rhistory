geom_boxplot() +
scale_fill_manual(values = couleurs_contrats) +  # Utiliser les couleurs définies précédemment
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
labs(title = "Distribution des salaires par type de contrat", x = "Type de Contrat", y = "Salaire Annuel")
library(ggplot2)
ordered_data <- raw_data[order(as.numeric(raw_data$Anciennete)), ]
# Création de catégories d'ancienneté (facultatif)
ordered_data$Anciennete_category <- cut(as.numeric(ordered_data$Anciennete), breaks = 5)
# Diagramme en barres pour la moyenne des salaires en fonction de l'ancienneté
ggplot(ordered_data, aes(x = Anciennete_category, y = Salaire_annuel, fill = Anciennete_category)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Moyenne des salaires en fonction de l'ancienneté",
x = "Ancienneté",
y = "Moyenne du Salaire Annuel",
fill = "Ancienneté") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Vérifiez toutes les valeurs uniques pour identifier les valeurs non désirées
unique(raw_data$Secteur)
# Filtrez le DataFrame pour ne garder que les lignes avec "Privé" et "Public"
filtered_data <- raw_data[raw_data$Secteur %in% c("Prive", "Public"), ]
# Continuez avec la création du graphique ggplot
ggplot(filtered_data, aes(x = Secteur, y = Salaire_annuel, fill = Secteur)) +
geom_boxplot(
width = 0.8,
notch = TRUE,
outlier.shape = NA,
color = "black",
alpha = 0.7
) +
scale_fill_manual(values = c("Prive" = "pink", "Public" = "green")) +
labs(
title = "Distribution des salaires par secteur (Privé et Public)",
x = "Secteur",
y = "Salaire Annuel"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_blank()
)
ggplot(raw_data, aes(x = factor(France), y = Salaire_annuel, fill = factor(France))) +
geom_violin(trim = FALSE, scale = "width", width = 0.8, alpha = 0.7) +
labs(
title = "Comparaison des salaires en fonction du pays",
x = "Pays",
y = "Salaire Annuel",
fill = "Pays"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_text(size = 10)
)
library(ggplot2)
# Calcul de la médiane des salaires par pays
median_salaries <- tapply(raw_data_filtered$Salaire_annuel, raw_data_filtered$Pays, median)
median_order <- names(sort(median_salaries))
# Création d'un facteur pour l'ordre des pays par médiane
emploiFactor <- factor(raw_data_filtered$Pays, levels = median_order)
# Création du diagramme en bâtonnets
ggplot(raw_data_filtered, aes(x = emploiFactor, y = Salaire_annuel, fill = emploiFactor)) +
geom_bar(stat = "summary", fun = "median", color = "white", size = 0.5) +
theme_minimal() +  # Fond blanc
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +  # Suppression des lignes de grille
labs(title = "Médiane des Salaires par Pays", x = "Pays", y = "Médiane du Salaire Annuel",
fill = "Pays")  # Légende pour les couleurs des pays
library(ggplot2)
# Remove rows with non-finite values in Salaire_annuel
raw_data <- raw_data[!is.na(raw_data$Salaire_annuel) & is.finite(raw_data$Salaire_annuel), ]
# Remove rows with non-finite values in other numeric columns if needed
# raw_data <- raw_data[complete.cases(raw_data[, numeric_cols]), ]
# Calculate average salary by region
avg_salary_by_region <- tapply(raw_data$Salaire_annuel, raw_data$Region, mean)
max_avg_salary_region <- names(which.max(avg_salary_by_region))
# Define a color palette for each region
color_palette <- rainbow(length(unique(raw_data$Region)))
# Plotting the distribution of salaries based on region as a pie chart
ggplot(raw_data, aes(x = "", y = Salaire_annuel, fill = Region)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +  # Removes unnecessary elements
labs(title = "Répartition des salaires par région",
fill = "Région",
y = "Salaire Annuel") +
scale_fill_manual(values = ifelse(raw_data$Region == max_avg_salary_region, "red", color_palette))  # Highlight region with highest average salary
# Trying ISO-8859-1
raw_data <- read.csv("data/data_2022.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut", "Salaire_annuel_brut_primes", "Responsabilite_hierarchique", "Responsabilite_budget", "Responsabilite_equipe", "Responsabilite_projet", "Satisfaction_globale", "Saitisfaction_relations", "Satisfaction_salaire","Satisfaction_condition_travail", "Satisfaction_autonomie", "Satisfaction_localisation")
# Convert columns to factors
raw_data[factor_cols] <- lapply(raw_data[factor_cols], as.factor)
# Convert columns to numeric
raw_data[numeric_cols] <- lapply(raw_data[numeric_cols], as.numeric)
remove_rows_by_value <- function(data, column_name, value_to_remove) {
data_filtered <- subset(data, !(data[[column_name]] == value_to_remove))
return(data_filtered)
}
ggplot(raw_data, aes(x = Genre, y = Salaire_annuel_brut_primes, fill = Genre)) +
geom_boxplot(width = 0.5, notch = TRUE, outlier.shape = NA) +
labs(title = "Différences de salaire par genre",
x = "Genre",
y = "Salaire Annuel") +
theme_minimal() +
theme(legend.position = "none")
ggplot(raw_data, aes(x = Salaire_annuel_brut_primes, fill = as.factor(Annee_diplome))) +
geom_density(alpha = 0.5) +
labs(title = "Distribution des salaires par année de diplôme",
x = "Salaire Annuel",
fill = "Année de Diplôme") +
theme_minimal()
library(ggplot2)
# Supprimer les lignes où 'Type_formation' est NA ou vide
clean_data <- raw_data[!is.na(raw_data$Type_formation) & raw_data$Type_formation != "", ]
# Créer le graphique avec les données nettoyées
ggplot(clean_data, aes(x = as.factor(Type_formation), y = Salaire_annuel_brut_primes, fill = as.factor(Type_formation))) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Moyenne des salaires par type de formation",
x = "Type de Formation",
y = "Moyenne du Salaire Annuel",
fill = "Type de Formation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(raw_data, aes(x = Filiere, y = Salaire_annuel_brut_primes, fill = Filiere)) +
geom_violin(trim = FALSE, scale = "width", width = 0.8) +
geom_boxplot(width = 0.2, fill = "white", color = "black", outlier.shape = NA) +
labs(title = "Distribution des salaires par filière",
x = "Filière",
y = "Salaire Annuel",
fill = "Filière") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
filtered_data <- remove_rows_by_value(raw_data, "Situation", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Etudes")
activite_data <- filtered_data
library(ggplot2)
# Remplacer 'activite_data' par votre dataframe réel
# Filtrage de certains contrats peu représentatifs
filtered_data <- raw_data[!raw_data$Nature_contrat %in% c("Service à la personne (cours particulier de mathématiques via Acadomia)", "", "18"), ]
# Supposons que les catégories de contrats sont 'CDD', 'CDI', 'Intérim', etc.
# Vous pouvez définir manuellement les couleurs pour chaque catégorie de contrat
couleurs_contrats <- c("CDD" = "#66c2a5", "CDI" = "#fc8d62", "Intérim" = "#8da0cb",
"Stage" = "#e78ac3", "Alternance" = "#a6d854", "CTT" = "#e78ac3")
# Diagramme en boîte avec couleurs
ggplot(filtered_data, aes(x = Nature_contrat, y = Salaire_annuel_brut_primes, fill = Nature_contrat)) +
geom_boxplot() +
scale_fill_manual(values = couleurs_contrats) +  # Utiliser les couleurs définies précédemment
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
labs(title = "Distribution des salaires par type de contrat", x = "Type de Contrat", y = "Salaire Annuel")
library(ggplot2)
ordered_data <- raw_data[order(as.numeric(raw_data$Anciennete)), ]
# Création de catégories d'ancienneté
ordered_data$Anciennete_category <- cut(as.numeric(ordered_data$Anciennete), breaks = 5)
# Diagramme en barres pour la moyenne des salaires en fonction de l'ancienneté
ggplot(ordered_data, aes(x = Anciennete_category, y = Salaire_annuel, fill = Anciennete_category)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Moyenne des salaires en fonction de l'ancienneté",
x = "Ancienneté",
y = "Moyenne du Salaire Annuel",
fill = "Ancienneté") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
ordered_data <- raw_data[order(as.numeric(raw_data$Anciennete)), ]
# Création de catégories d'ancienneté
ordered_data$Anciennete_category <- cut(as.numeric(ordered_data$Anciennete), breaks = 5)
# Diagramme en barres pour la moyenne des salaires en fonction de l'ancienneté
ggplot(ordered_data, aes(x = Anciennete_category, y = Salaire_annuel_brut_primes, fill = Anciennete_category)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Moyenne des salaires en fonction de l'ancienneté",
x = "Ancienneté",
y = "Moyenne du Salaire Annuel",
fill = "Ancienneté") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
ordered_data <- raw_data[order(as.numeric(raw_data$Anciennete)), ]
# Création de catégories d'ancienneté
ordered_data$Anciennete_category <- cut(as.numeric(ordered_data$Anciennete), breaks = 5)
# Diagramme en barres pour la moyenne des salaires en fonction de l'ancienneté
ggplot(ordered_data, aes(x = Anciennete_category, y = Salaire_annuel_brut_primes, fill = Anciennete_category)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Moyenne des salaires en fonction de l'ancienneté",
x = "Ancienneté",
y = "Moyenne du Salaire Annuel",
fill = "Ancienneté") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Supposons que 'Secteur' est la colonne qui indique si une personne travaille dans le secteur privé ou public.
# Nous allons exclure les non-salariés qui, dans cet exemple, sont marqués comme 'Non salarie(e)' dans la colonne 'Secteur'.
filtered_data <- raw_data[raw_data$Secteur != 'Non salarie(e)', ]
# Graphique Boîte à moustaches avec deux couleurs pour le secteur privé et le secteur public
ggplot(filtered_data, aes(x = Secteur, y = Salaire_annuel_brut_primes, fill = Secteur)) +
geom_boxplot(
width = 0.8,
notch = TRUE,
outlier.shape = NA,
color = "black", # La couleur des lignes du boxplot
alpha = 0.7
) +
scale_fill_manual(values = c("Prive" = "pink", "Public" = "green")) + # Deux couleurs pour privé et public
labs(
title = "Distribution des salaires par secteur (Privé et Public)",
x = "Secteur",
y = "Salaire Annuel"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_blank() # Enlève le titre de la légende
)
ggplot(raw_data, aes(x = factor(Pays), y = Salaire_annuel_brut_primes, fill = factor(Pays))) +
geom_violin(trim = FALSE, scale = "width", width = 0.8, alpha = 0.7) +
labs(
title = "Comparaison des salaires en fonction du pays",
x = "Pays",
y = "Salaire Annuel",
fill = "Pays"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_text(size = 10)
)
library(ggplot2)
# Calcul de la médiane des salaires par pays
median_salaries <- tapply(raw_data_filtered$Salaire_annuel, raw_data_filtered$Pays, median)
median_order <- names(sort(median_salaries))
# Création d'un facteur pour l'ordre des pays par médiane
emploiFactor <- factor(raw_data_filtered$Pays, levels = median_order)
# Création du diagramme en bâtonnets
ggplot(raw_data_filtered, aes(x = emploiFactor, y = Salaire_annuel, fill = emploiFactor)) +
geom_bar(stat = "summary", fun = "median", color = "white", size = 0.5) +
theme_minimal() +  # Fond blanc
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +  # Suppression des lignes de grille
labs(title = "Médiane des Salaires par Pays", x = "Pays", y = "Médiane du Salaire Annuel",
fill = "Pays")  # Légende pour les couleurs des pays
library(ggplot2)
# Remove rows with non-finite values in Salaire_annuel
raw_data <- raw_data[!is.na(raw_data$Salaire_annuel_brut_primes ) & is.finite(raw_data$Salaire_annuel_brut_primes), ]
# Calculate average salary by region
avg_salary_by_region <- tapply(raw_data$Salaire_annuel_brut_primes, raw_data$Region, mean)
max_avg_salary_region <- names(which.max(avg_salary_by_region))
# Define a color palette for each region
color_palette <- rainbow(length(unique(raw_data$Region)))
# Plotting the distribution of salaries based on region as a pie chart
# ggplot(raw_data, aes(x = "", y = Salaire_annuel_brut_primes, fill = Region)) +
#  geom_bar(stat = "identity", width = 1) +
#  coord_polar("y") +
#  theme_void() +  # Removes unnecessary elements
#  labs(title = "Répartition des salaires par région",
#       fill = "Région",
#       y = "Salaire Annuel") +
#  scale_fill_manual(values = ifelse(raw_data$Region == max_avg_salary_region, "red", color_palette))  # Highlight region with highest average salary
# Trying ISO-8859-1
raw_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut", "Salaire_annuel_brut_primes", "Responsabilite_hierarchique", "Responsabilite_budget", "Responsabilite_equipe", "Responsabilite_projet", "Satisfaction_globale", "Satisfaction_relations", "Satisfaction_salaire", "Satisfaction_autonomie", "Satisfaction_localisation")
# Convert columns to factors
raw_data[factor_cols] <- lapply(raw_data[factor_cols], as.factor)
# Convert columns to numeric
raw_data[numeric_cols] <- sapply(raw_data[numeric_cols], as.numeric)
remove_rows_by_value <- function(data, column_name, value_to_remove) {
data_filtered <- subset(data, !(data[[column_name]] == value_to_remove))
return(data_filtered)
}
ggplot(raw_data, aes(x = Genre, y = Salaire_annuel_brut_primes, fill = Genre)) +
geom_boxplot(width = 0.5, notch = TRUE, outlier.shape = NA) +
labs(title = "Différences de salaire par genre",
x = "Genre",
y = "Salaire Annuel") +
theme_minimal() +
theme(legend.position = "none")
ggplot(raw_data, aes(x = Salaire_annuel_brut_primes, fill = as.factor(Annee_diplome))) +
geom_density(alpha = 0.5) +
labs(title = "Distribution des salaires par année de diplôme",
x = "Salaire Annuel",
fill = "Année de Diplôme") +
theme_minimal()
library(ggplot2)
# Supprimer les lignes où 'Type_formation' est NA ou vide
clean_data <- raw_data[!is.na(raw_data$Type_formation) & raw_data$Type_formation != "", ]
# Créer le graphique avec les données nettoyées
ggplot(clean_data, aes(x = as.factor(Type_formation), y = Salaire_annuel_brut_primes, fill = as.factor(Type_formation))) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Moyenne des salaires par type de formation",
x = "Type de Formation",
y = "Moyenne du Salaire Annuel",
fill = "Type de Formation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(raw_data, aes(x = Filiere, y = Salaire_annuel_brut_primes, fill = Filiere)) +
geom_violin(trim = FALSE, scale = "width", width = 0.8) +
geom_boxplot(width = 0.2, fill = "white", color = "black", outlier.shape = NA) +
labs(title = "Distribution des salaires par filière",
x = "Filière",
y = "Salaire Annuel",
fill = "Filière") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
filtered_data <- remove_rows_by_value(raw_data, "Situation", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation", "Etudes")
activite_data <- filtered_data
library(ggplot2)
# Remplacer 'activite_data' par votre dataframe réel
# Filtrage de certains contrats peu représentatifs
filtered_data <- raw_data[!raw_data$Nature_contrat %in% c("Service à la personne (cours particulier de mathématiques via Acadomia)", "", "Autre", "de cdd a cdi"), ]
# Supposons que les catégories de contrats sont 'CDD', 'CDI', 'Intérim', etc.
# Vous pouvez définir manuellement les couleurs pour chaque catégorie de contrat
couleurs_contrats <- c("CDD" = "#66c2a5", "CDI" = "#fc8d62", "Intérim" = "#8da0cb",
"CDIC" = "#e78ac3", "Contrat local" = "#a6d854", "CTT" = "#e78ac3")
# Diagramme en boîte avec couleurs
ggplot(filtered_data, aes(x = Nature_contrat, y = Salaire_annuel_brut_primes, fill = Nature_contrat)) +
geom_boxplot() +
scale_fill_manual(values = couleurs_contrats) +  # Utiliser les couleurs définies précédemment
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
labs(title = "Distribution des salaires par type de contrat", x = "Type de Contrat", y = "Salaire Annuel")
library(ggplot2)
ordered_data <- raw_data[order(as.numeric(raw_data$Anciennete)), ]
# Création de catégories d'ancienneté (facultatif)
ordered_data$Anciennete_category <- cut(as.numeric(ordered_data$Anciennete), breaks = 5)
# Diagramme en barres pour la moyenne des salaires en fonction de l'ancienneté
ggplot(ordered_data, aes(x = Anciennete_category, y = Salaire_annuel, fill = Anciennete_category)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Moyenne des salaires en fonction de l'ancienneté",
x = "Ancienneté",
y = "Moyenne du Salaire Annuel",
fill = "Ancienneté") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
ordered_data <- raw_data[order(as.numeric(raw_data$Anciennete)), ]
# Création de catégories d'ancienneté (facultatif)
ordered_data$Anciennete_category <- cut(as.numeric(ordered_data$Anciennete), breaks = 5)
# Diagramme en barres pour la moyenne des salaires en fonction de l'ancienneté
ggplot(ordered_data, aes(x = Anciennete_category, y = Salaire_annuel_brut_primes, fill = Anciennete_category)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Moyenne des salaires en fonction de l'ancienneté",
x = "Ancienneté",
y = "Moyenne du Salaire Annuel",
fill = "Ancienneté") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
ordered_data <- raw_data[order(as.numeric(raw_data$Anciennete)), ]
# Création de catégories d'ancienneté (facultatif)
ordered_data$Anciennete_category <- cut(as.numeric(ordered_data$Anciennete), breaks = 5)
# Diagramme en barres pour la moyenne des salaires en fonction de l'ancienneté
ggplot(ordered_data, aes(x = Anciennete_category, y = Salaire_annuel_brut_primes, fill = Anciennete_category)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Moyenne des salaires en fonction de l'ancienneté",
x = "Ancienneté",
y = "Moyenne du Salaire Annuel",
fill = "Ancienneté") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Supposons que 'Secteur' est la colonne qui indique si une personne travaille dans le secteur privé ou public.
# Nous allons exclure les non-salariés qui, dans cet exemple, sont marqués comme 'Non salarie(e)' dans la colonne 'Secteur'.
filtered_data <- raw_data[raw_data$Secteur != 'Non salarie(e)', ]
# Graphique Boîte à moustaches avec deux couleurs pour le secteur privé et le secteur public
ggplot(filtered_data, aes(x = Secteur, y = Salaire_annuel_brut_primes, fill = Secteur)) +
geom_boxplot(
width = 0.8,
notch = TRUE,
outlier.shape = NA,
color = "black", # La couleur des lignes du boxplot
alpha = 0.7
) +
scale_fill_manual(values = c("Prive" = "pink", "Public" = "green")) + # Deux couleurs pour privé et public
labs(
title = "Distribution des salaires par secteur (Privé et Public)",
x = "Secteur",
y = "Salaire Annuel"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_blank() # Enlève le titre de la légende
)
ggplot(raw_data, aes(x = factor(Pays), y = Salaire_annuel_brut_primes, fill = factor(Pays))) +
geom_violin(trim = FALSE, scale = "width", width = 0.8, alpha = 0.7) +
labs(
title = "Comparaison des salaires en fonction du pays",
x = "Pays",
y = "Salaire Annuel",
fill = "Pays"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_text(size = 10)
)
library(ggplot2)
# Calcul de la médiane des salaires par pays
median_salaries <- tapply(raw_data_filtered$Salaire_annuel, raw_data_filtered$Pays, median)
median_order <- names(sort(median_salaries))
# Création d'un facteur pour l'ordre des pays par médiane
emploiFactor <- factor(raw_data_filtered$Pays, levels = median_order)
# Création du diagramme en bâtonnets
ggplot(raw_data_filtered, aes(x = emploiFactor, y = Salaire_annuel, fill = emploiFactor)) +
geom_bar(stat = "summary", fun = "median", color = "white", size = 0.5) +
theme_minimal() +  # Fond blanc
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +  # Suppression des lignes de grille
labs(title = "Médiane des Salaires par Pays", x = "Pays", y = "Médiane du Salaire Annuel",
fill = "Pays")  # Légende pour les couleurs des pays
library(ggplot2)
# Remove rows with non-finite values in Salaire_annuel
raw_data <- raw_data[!is.na(raw_data$Salaire_annuel_brut_primes) & is.finite(raw_data$Salaire_annuel_brut_primes), ]
# Remove rows with non-finite values in other numeric columns if needed
# raw_data <- raw_data[complete.cases(raw_data[, numeric_cols]), ]
# Calculate average salary by region
avg_salary_by_region <- tapply(raw_data$Salaire_annuel_brut_primes, raw_data$Region, mean)
max_avg_salary_region <- names(which.max(avg_salary_by_region))
# Define a color palette for each region
color_palette <- rainbow(length(unique(raw_data$Region)))
# Plotting the distribution of salaries based on region as a pie chart
ggplot(raw_data, aes(x = "", y = Salaire_annuel_brut_primes, fill = Region)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +  # Removes unnecessary elements
labs(title = "Répartition des salaires par région",
fill = "Région",
y = "Salaire Annuel") +
scale_fill_manual(values = ifelse(raw_data$Region == max_avg_salary_region, "red", color_palette))  # Highlight region with highest average salary
# Trying ISO-8859-1
base_data <- read.csv("data/data_2023.csv", sep = ",", fileEncoding = "UTF-8")
# Lists specifying which columns to convert to factors and numeric
factor_cols <- c("Date", "Identifiant", "Genre", "Annee_diplome","Type_formation","Filiere","Situation_actuelle","Secteur","Nature_contrat", "Pays","Region", "Pays_etranger", "Taille_entreprise", "Nom_entreprise", "Departement", "Intitule_poste", "Secteur_activite")
numeric_cols <- c("Anciennete","Salaire_annuel_brut_primes")
# Convert columns to factors
base_data[factor_cols] <- lapply(base_data[factor_cols], as.factor)
# Convert columns to numeric
base_data[numeric_cols] <- lapply(base_data[numeric_cols], as.numeric)
filtered_data <- remove_rows_by_value(base_data, "Situation_actuelle", "En recherche emploi")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En poursuite d'études (hors thèse) / en formation")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "These")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Sans activité")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Volontariat")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "En création d'entreprise /reprise d'entreprise")
filtered_data <- remove_rows_by_value(filtered_data, "Situation_actuelle", "Etudes")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "")
filtered_data <- remove_rows_by_value(filtered_data, "Salaire_annuel_brut_primes", "")
filtered_data <- remove_rows_by_value(filtered_data, "Nature_contrat", "CDD a la cimenterie Lafarge de Saint Pierre La Cour depuis le 1 er mars 2022. Passage en CDI a partir de fevrier 2023")
base_data <- filtered_data
raw_data <- base_data
# ANOVA pour la variable "Pays"
anova_pays <- aov(Salaire_annuel_brut_primes ~ Pays, data = base_data)
# ANOVA pour la variable "Nature_contrat"
anova_contrat <- aov(Salaire_annuel_brut_primes ~ Nature_contrat, data = base_data)
# ANOVA pour la variable "Filiere"
anova_filiere <- aov(Salaire_annuel_brut_primes ~ Filiere, data = base_data)
# ANOVA pour la variable "Type_formation"
anova_formation <- aov(Salaire_annuel_brut_primes ~ Type_formation, data = base_data)
# ANOVA pour la variable "Genre"
anova_genre <- aov(Salaire_annuel_brut_primes ~ Genre, data = base_data)
# Afficher les résultats
summary(anova_pays)
summary(anova_contrat)
summary(anova_filiere)
summary(anova_formation)
summary(anova_genre)
raw_data <- base_data
# Assuming raw_data is your data frame containing the relevant variables
# Convert categorical variables to factors if not done already
raw_data$Pays <- as.factor(raw_data$Pays)
raw_data$Nature_contrat <- as.factor(raw_data$Nature_contrat)
raw_data$Filiere <- as.factor(raw_data$Filiere)
raw_data$Type_formation <- as.factor(raw_data$Type_formation)
raw_data$Genre <- as.factor(raw_data$Genre)
# Create a linear model
reg_model <- lm(Salaire_annuel_brut_primes ~ Pays + Nature_contrat + Filiere + Type_formation + Genre, data = raw_data)
# Summary of the regression model
summary(reg_model)
library(FactoMineR)
# Sélectionner les variables d'intérêt
variables_mca <- c("Pays", "Nature_contrat", "Filiere", "Type_formation", "Genre", "Salaire_annuel_brut_primes")
# Sous-ensemble des données avec les variables sélectionnées
data_mca <- base_data[, variables_mca]
# Supprimer les lignes avec des valeurs manquantes
data_mca <- na.omit(data_mca)
# Effectuer l'Analyse en Correspondances Multiples (MCA)
mca_result <- MCA(data_mca[, -6])
